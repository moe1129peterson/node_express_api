"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const R = require("ramda");
const sortPackages = R.sortBy(R.prop('name'));
function default_1(project, tree, opts) {
    return __awaiter(this, void 0, void 0, function* () {
        const pkgs = sortPackages(flatten(tree));
        if (!opts.alwaysPrintRootPackage && !pkgs.length)
            return '';
        if (opts.long) {
            let firstLine = project.path;
            if (project.name) {
                firstLine += `:${project.name}`;
                if (project.version) {
                    firstLine += `@${project.version}`;
                }
            }
            return [
                firstLine,
                ...pkgs.map((pkg) => `${pkg.path}:${pkg.name}@${pkg.version}`),
            ].join('\n');
        }
        return [
            project.path,
            ...pkgs.map((pkg) => pkg.path),
        ].join('\n');
    });
}
exports.default = default_1;
function flatten(nodes) {
    let packages = [];
    for (const node of nodes) {
        packages.push(node.pkg);
        if (node.dependencies && node.dependencies.length) {
            packages = packages.concat(flatten(node.dependencies));
        }
    }
    return packages;
}
//# sourceMappingURL=renderParseable.js.map