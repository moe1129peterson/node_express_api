"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const dint = require("dint");
const execa = require("execa");
const path = require("path");
const pathTemp = require("path-temp");
const rimraf = require("rimraf-then");
exports.default = () => {
    return {
        git: function fetchFromGit(resolution, targetFolder) {
            return __awaiter(this, void 0, void 0, function* () {
                const tempLocation = pathTemp(targetFolder);
                yield execGit(['clone', resolution.repo, tempLocation]);
                yield execGit(['checkout', resolution.commit], { cwd: tempLocation });
                // removing /.git to make directory integrity calculation faster
                yield rimraf(path.join(tempLocation, '.git'));
                return {
                    filesIndex: yield dint.from(tempLocation),
                    tempLocation,
                };
            });
        },
    };
};
function prefixGitArgs() {
    return process.platform === 'win32' ? ['-c', 'core.longpaths=true'] : [];
}
function execGit(args, opts) {
    const fullArgs = prefixGitArgs().concat(args || []);
    return execa('git', fullArgs, opts);
}
//# sourceMappingURL=index.js.map