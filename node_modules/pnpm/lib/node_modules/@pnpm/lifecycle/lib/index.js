"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const read_package_json_1 = require("@pnpm/read-package-json");
const path = require("path");
const exists = require("path-exists");
const runLifecycleHook_1 = require("./runLifecycleHook");
const runLifecycleHooksConcurrently_1 = require("./runLifecycleHooksConcurrently");
exports.runLifecycleHooksConcurrently = runLifecycleHooksConcurrently_1.default;
exports.default = runLifecycleHook_1.default;
function runPostinstallHooks(opts) {
    return __awaiter(this, void 0, void 0, function* () {
        const pkg = yield read_package_json_1.fromDir(opts.pkgRoot);
        const scripts = pkg && pkg.scripts || {};
        if (!scripts.install) {
            yield checkBindingGyp(opts.pkgRoot, scripts);
        }
        if (scripts.preinstall) {
            yield runLifecycleHook_1.default('preinstall', pkg, opts);
        }
        if (scripts.install) {
            yield runLifecycleHook_1.default('install', pkg, opts);
        }
        if (scripts.postinstall) {
            yield runLifecycleHook_1.default('postinstall', pkg, opts);
        }
        if (opts.prepare && scripts.prepare) {
            yield runLifecycleHook_1.default('prepare', pkg, opts);
        }
        return !!scripts.preinstall || !!scripts.install || !!scripts.postinstall;
    });
}
exports.runPostinstallHooks = runPostinstallHooks;
/**
 * Run node-gyp when binding.gyp is available. Only do this when there's no
 * `install` script (see `npm help scripts`).
 */
function checkBindingGyp(root, scripts) {
    return __awaiter(this, void 0, void 0, function* () {
        if (yield exists(path.join(root, 'binding.gyp'))) {
            scripts['install'] = 'node-gyp rebuild'; // tslint:disable-line:no-string-literal
        }
    });
}
//# sourceMappingURL=index.js.map