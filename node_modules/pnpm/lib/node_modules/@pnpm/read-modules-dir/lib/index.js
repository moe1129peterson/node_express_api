"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require("mz/fs");
const path = require("path");
function readModulesDir(modulesDir) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            return yield _readModulesDir(modulesDir);
        }
        catch (err) {
            if (err['code'] === 'ENOENT')
                return null;
            throw err;
        }
    });
}
exports.default = readModulesDir;
function _readModulesDir(modulesDir, scope) {
    return __awaiter(this, void 0, void 0, function* () {
        let pkgNames = [];
        const parentDir = scope ? path.join(modulesDir, scope) : modulesDir;
        for (const dir of yield fs.readdir(parentDir)) {
            if (dir[0] === '.')
                continue;
            if (!scope && dir[0] === '@') {
                pkgNames = [
                    ...pkgNames,
                    ...yield _readModulesDir(modulesDir, dir),
                ];
                continue;
            }
            const pkgName = scope ? `${scope}/${dir}` : dir;
            pkgNames.push(pkgName);
        }
        return pkgNames;
    });
}
//# sourceMappingURL=index.js.map