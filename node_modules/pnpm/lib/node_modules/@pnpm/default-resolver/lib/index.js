"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const git_resolver_1 = require("@pnpm/git-resolver");
const local_resolver_1 = require("@pnpm/local-resolver");
const npm_resolver_1 = require("@pnpm/npm-resolver");
const tarball_resolver_1 = require("@pnpm/tarball-resolver");
function createResolver(pnpmOpts) {
    const resolveFromNpm = npm_resolver_1.default(pnpmOpts);
    const resolveFromGit = git_resolver_1.default(pnpmOpts);
    return (wantedDependency, opts) => __awaiter(this, void 0, void 0, function* () {
        const resolution = (yield resolveFromNpm(wantedDependency, opts))
            || wantedDependency.pref && ((yield tarball_resolver_1.default(wantedDependency))
                || (yield resolveFromGit(wantedDependency))
                || (yield local_resolver_1.default(wantedDependency, opts)));
        if (!resolution) {
            throw new Error(`Cannot resolve ${wantedDependency.alias ? wantedDependency.alias + '@' : ''}${wantedDependency.pref} packages not supported`);
        }
        return resolution;
    });
}
exports.default = createResolver;
//# sourceMappingURL=index.js.map