"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const readPackageJsonCB = require("read-package-json");
const promisify = require("util.promisify");
const readPackageJson = promisify(readPackageJsonCB);
function readPkg(pkgPath) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            return yield readPackageJson(pkgPath);
        }
        catch (err) {
            if (err['code'])
                throw err; // tslint:disable-line
            const pnpmError = new Error(`${pkgPath}: ${err.message}`);
            pnpmError['code'] = 'ERR_PNPM_BAD_PACKAGE_JSON'; // tslint:disable-line
            throw pnpmError;
        }
    });
}
exports.default = readPkg;
function fromDir(pkgPath) {
    return readPkg(path.join(pkgPath, 'package.json'));
}
exports.fromDir = fromDir;
//# sourceMappingURL=index.js.map