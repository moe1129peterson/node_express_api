"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const utils_1 = require("@pnpm/utils");
const path = require("path");
const pnpmPkgJson_1 = require("../pnpmPkgJson");
const defaults = (opts) => __awaiter(this, void 0, void 0, function* () {
    const packageManager = opts.packageManager || {
        name: pnpmPkgJson_1.default.name,
        version: pnpmPkgJson_1.default.version,
    };
    return {
        childConcurrency: 5,
        depth: 0,
        engineStrict: false,
        force: false,
        forceSharedShrinkwrap: false,
        frozenShrinkwrap: false,
        hooks: {},
        ignoreCurrentPrefs: false,
        ignoreScripts: false,
        include: {
            dependencies: true,
            devDependencies: true,
            optionalDependencies: true,
        },
        independentLeaves: false,
        localPackages: {},
        lock: true,
        locks: path.join(opts.store, '_locks'),
        lockStaleDuration: 5 * 60 * 1000,
        nodeVersion: process.version,
        ownLifecycleHooksStdio: 'inherit',
        packageManager,
        preferFrozenShrinkwrap: true,
        pruneShrinkwrapImporters: false,
        pruneStore: false,
        rawNpmConfig: {},
        registries: utils_1.DEFAULT_REGISTRIES,
        repeatInstallDepth: -1,
        shamefullyFlatten: false,
        shrinkwrap: true,
        shrinkwrapDirectory: opts.shrinkwrapDirectory || opts.prefix || process.cwd(),
        shrinkwrapOnly: false,
        sideEffectsCacheRead: false,
        sideEffectsCacheWrite: false,
        store: opts.store,
        storeController: opts.storeController,
        strictPeerDependencies: false,
        tag: 'latest',
        unsafePerm: process.platform === 'win32' ||
            process.platform === 'cygwin' ||
            !(process.getuid && process.setuid &&
                process.getgid && process.setgid) ||
            process.getuid() !== 0,
        update: false,
        userAgent: `${packageManager.name}/${packageManager.version} npm/? node/${process.version} ${process.platform} ${process.arch}`,
        verifyStoreIntegrity: true,
    };
});
exports.default = (opts) => __awaiter(this, void 0, void 0, function* () {
    if (opts) {
        for (const key in opts) {
            if (opts[key] === undefined) {
                delete opts[key];
            }
        }
    }
    const defaultOpts = yield defaults(opts);
    const extendedOpts = Object.assign({}, defaultOpts, opts, { store: defaultOpts.store });
    if (!extendedOpts.shrinkwrap && extendedOpts.shrinkwrapOnly) {
        throw new Error('Cannot generate a shrinkwrap.yaml because shrinkwrap is set to false');
    }
    if (extendedOpts.userAgent.startsWith('npm/')) {
        extendedOpts.userAgent = `${extendedOpts.packageManager.name}/${extendedOpts.packageManager.version} ${extendedOpts.userAgent}`;
    }
    extendedOpts.registries = utils_1.normalizeRegistries(extendedOpts.registries);
    extendedOpts.rawNpmConfig['registry'] = extendedOpts.registries.default; // tslint:disable-line:no-string-literal
    return extendedOpts;
});
//# sourceMappingURL=extendInstallOptions.js.map