"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const core_loggers_1 = require("@pnpm/core-loggers");
const logger_1 = require("@pnpm/logger");
const read_manifests_1 = require("@pnpm/read-manifests");
const types_1 = require("@pnpm/types");
const utils_1 = require("@pnpm/utils");
const mkdirp = require("mkdirp-promise");
const removeAllExceptOuterLinks = require("remove-all-except-outer-links");
const errorTypes_1 = require("../errorTypes");
const checkCompatibility_1 = require("./checkCompatibility");
const readShrinkwrapFiles_1 = require("./readShrinkwrapFiles");
function getContext(importers, opts) {
    return __awaiter(this, void 0, void 0, function* () {
        const manifests = yield read_manifests_1.default(importers, opts.shrinkwrapDirectory, {
            shamefullyFlatten: opts.shamefullyFlatten,
        });
        if (manifests.modules) {
            yield validateNodeModules(manifests.modules, manifests.importers, {
                force: opts.force,
                include: opts.include,
                independentLeaves: opts.independentLeaves,
                shrinkwrapDirectory: opts.shrinkwrapDirectory,
                store: opts.store,
            });
        }
        yield mkdirp(opts.store);
        manifests.importers.forEach((importer) => {
            core_loggers_1.packageJsonLogger.debug({
                initial: importer.pkg,
                prefix: importer.prefix,
            });
        });
        if (opts.hooks && opts.hooks.readPackage) {
            manifests.importers = manifests.importers.map((importer) => (Object.assign({}, importer, { pkg: opts.hooks.readPackage(importer.pkg) })));
        }
        const importerOptionsByPrefix = importers.reduce((prev, curr) => {
            prev[curr.prefix] = curr;
            return prev;
        }, {});
        const ctx = Object.assign({ importers: manifests.importers.map((importer) => (Object.assign({}, importerOptionsByPrefix[importer.prefix], importer))), include: opts.include || manifests.include, modulesFile: manifests.modules, pendingBuilds: manifests.pendingBuilds, registries: Object.assign({}, opts.registries, manifests.registries), shrinkwrapDirectory: opts.shrinkwrapDirectory, skipped: manifests.skipped, storePath: opts.store, virtualStoreDir: manifests.virtualStoreDir }, yield readShrinkwrapFiles_1.default({
            force: opts.force,
            forceSharedShrinkwrap: opts.forceSharedShrinkwrap,
            importers: manifests.importers,
            registry: opts.registries.default,
            shrinkwrap: opts.shrinkwrap,
            shrinkwrapDirectory: opts.shrinkwrapDirectory,
        }));
        return ctx;
    });
}
exports.default = getContext;
function validateNodeModules(modules, importers, opts) {
    return __awaiter(this, void 0, void 0, function* () {
        if (Boolean(modules.independentLeaves) !== opts.independentLeaves) {
            if (opts.force) {
                yield Promise.all(importers.map((importer) => __awaiter(this, void 0, void 0, function* () {
                    logger_1.default.info({
                        message: `Recreating ${importer.modulesDir}`,
                        prefix: importer.prefix,
                    });
                    yield removeAllExceptOuterLinks(importer.modulesDir);
                })));
                // TODO: remove the node_modules in the shrinkwrap directory
                return;
            }
            if (modules.independentLeaves) {
                throw new errorTypes_1.PnpmError('ERR_PNPM_INDEPENDENT_LEAVES_WANTED', 'This "node_modules" folder was created using the --independent-leaves option.'
                    + ' You must add that option, or else run "pnpm install --force" to recreate the "node_modules" folder.');
            }
            throw new errorTypes_1.PnpmError('ERR_PNPM_INDEPENDENT_LEAVES_NOT_WANTED', 'This "node_modules" folder was created without the --independent-leaves option.'
                + ' You must remove that option, or else "pnpm install --force" to recreate the "node_modules" folder.');
        }
        yield Promise.all(importers.map((importer) => __awaiter(this, void 0, void 0, function* () {
            try {
                if (typeof importer.currentShamefullyFlatten === 'boolean' && importer.currentShamefullyFlatten !== importer.shamefullyFlatten) {
                    if (importer.currentShamefullyFlatten) {
                        throw new errorTypes_1.PnpmError('ERR_PNPM_SHAMEFULLY_FLATTEN_WANTED', 'This "node_modules" folder was created using the --shamefully-flatten option.'
                            + ' You must add this option, or else add the --force option to recreate the "node_modules" folder.');
                    }
                    throw new errorTypes_1.PnpmError('ERR_PNPM_SHAMEFULLY_FLATTEN_NOT_WANTED', 'This "node_modules" folder was created without the --shamefully-flatten option.'
                        + ' You must remove that option, or else add the --force option to recreate the "node_modules" folder.');
                }
                checkCompatibility_1.default(modules, { storePath: opts.store, modulesPath: importer.modulesDir });
                if (opts.shrinkwrapDirectory !== importer.prefix && opts.include && modules.included) {
                    for (const depsField of types_1.DEPENDENCIES_FIELDS) {
                        if (opts.include[depsField] !== modules.included[depsField]) {
                            throw new errorTypes_1.PnpmError('ERR_PNPM_INCLUDED_DEPS_CONFLICT', `node_modules (at "${opts.shrinkwrapDirectory}") was installed with ${stringifyIncludedDeps(modules.included)}. ` +
                                `Current install wants ${stringifyIncludedDeps(opts.include)}.`);
                        }
                    }
                }
            }
            catch (err) {
                if (!opts.force)
                    throw err;
                logger_1.default.info({
                    message: `Recreating ${importer.modulesDir}`,
                    prefix: importer.prefix,
                });
                yield removeAllExceptOuterLinks(importer.modulesDir);
            }
        })));
    });
}
function stringifyIncludedDeps(included) {
    return types_1.DEPENDENCIES_FIELDS.filter((depsField) => included[depsField]).join(', ');
}
function getContextForSingleImporter(opts) {
    return __awaiter(this, void 0, void 0, function* () {
        const manifests = yield read_manifests_1.default([
            {
                prefix: opts.prefix,
            },
        ], opts.shrinkwrapDirectory, {
            shamefullyFlatten: opts.shamefullyFlatten,
        });
        const storePath = opts.store;
        const importer = manifests.importers[0];
        const modulesDir = importer.modulesDir;
        const importerId = importer.id;
        if (manifests.modules) {
            yield validateNodeModules(manifests.modules, manifests.importers, {
                force: opts.force,
                include: opts.include,
                independentLeaves: opts.independentLeaves,
                shrinkwrapDirectory: opts.shrinkwrapDirectory,
                store: opts.store,
            });
        }
        const files = yield Promise.all([
            utils_1.safeReadPackageFromDir(opts.prefix),
            mkdirp(storePath),
        ]);
        const pkg = files[0] || {};
        const ctx = Object.assign({ hoistedAliases: importer.hoistedAliases, importerId, include: opts.include || manifests.include, modulesDir, modulesFile: manifests.modules, pendingBuilds: manifests.pendingBuilds, pkg: opts.hooks && opts.hooks.readPackage ? opts.hooks.readPackage(pkg) : pkg, prefix: opts.prefix, registries: Object.assign({}, opts.registries, manifests.registries), shrinkwrapDirectory: opts.shrinkwrapDirectory, skipped: manifests.skipped, storePath, virtualStoreDir: manifests.virtualStoreDir }, yield readShrinkwrapFiles_1.default({
            force: opts.force,
            forceSharedShrinkwrap: opts.forceSharedShrinkwrap,
            importers: [{ id: importerId, prefix: opts.prefix }],
            registry: opts.registries.default,
            shrinkwrap: opts.shrinkwrap,
            shrinkwrapDirectory: opts.shrinkwrapDirectory,
        }));
        core_loggers_1.packageJsonLogger.debug({
            initial: pkg,
            prefix: opts.prefix,
        });
        return ctx;
    });
}
exports.getContextForSingleImporter = getContextForSingleImporter;
//# sourceMappingURL=index.js.map