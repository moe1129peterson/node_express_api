"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_locker_1 = require("@pnpm/fs-locker");
const logger_1 = require("@pnpm/logger");
function withLock(dir, fn, opts) {
    return __awaiter(this, void 0, void 0, function* () {
        const unlock = yield fs_locker_1.default(dir, {
            locks: opts.locks,
            stale: opts.stale,
            whenLocked() {
                logger_1.default.warn({
                    message: 'waiting for another installation to complete...',
                    prefix: opts.prefix,
                });
            },
        });
        try {
            const result = yield fn();
            yield unlock();
            return result;
        }
        catch (err) {
            yield unlock();
            // TODO: revise how store locking works
            // maybe it needs to happen outside of supi
            yield opts.storeController.close();
            throw err;
        }
    });
}
exports.default = withLock;
//# sourceMappingURL=lock.js.map