"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const logger_1 = require("@pnpm/logger");
const isInnerLink = require("is-inner-link");
const isSubdir = require("is-subdir");
const mkdirp = require("mkdirp-promise");
const fs = require("mz/fs");
const path = require("path");
function safeIsInnerLink(importerModulesDir, depName, opts) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            const link = yield isInnerLink(importerModulesDir, depName);
            if (link.isInner)
                return true;
            if (isSubdir(opts.storePath, link.target))
                return true;
            return link.target;
        }
        catch (err) {
            if (err.code === 'ENOENT')
                return true;
            if (opts.hideAlienModules) {
                logger_1.default.warn({
                    message: `Moving ${depName} that was installed by a different package manager to "node_modules/.ignored`,
                    prefix: opts.prefix,
                });
                const ignoredDir = path.join(importerModulesDir, '.ignored', depName);
                yield mkdirp(path.dirname(ignoredDir));
                yield fs.rename(path.join(importerModulesDir, depName), ignoredDir);
            }
            return true;
        }
    });
}
exports.default = safeIsInnerLink;
//# sourceMappingURL=safeIsInnerLink.js.map