"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const logger_1 = require("@pnpm/logger");
const parseWantedDependencies_1 = require("./parseWantedDependencies");
function default_1(packageSelectors, opts) {
    return __awaiter(this, void 0, void 0, function* () {
        const reporter = opts && opts.reporter;
        if (reporter) {
            logger_1.streamParser.on('data', reporter);
        }
        const packageSelectorsBySearchQueries = packageSelectors.reduce((acc, packageSelector) => {
            const searchQuery = parsedPackageSelectorToSearchQuery(parseWantedDependencies_1.parseWantedDependency(packageSelector));
            acc[searchQuery] = packageSelector;
            return acc;
        }, {});
        const packageUsagesBySearchQueries = yield opts.storeController.findPackageUsages(Object.keys(packageSelectorsBySearchQueries));
        const results = {};
        for (const searchQuery of Object.keys(packageSelectorsBySearchQueries)) {
            results[packageSelectorsBySearchQueries[searchQuery]] = packageUsagesBySearchQueries[searchQuery] || [];
        }
        if (reporter) {
            logger_1.streamParser.removeListener('data', reporter);
        }
        return results;
    });
}
exports.default = default_1;
function parsedPackageSelectorToSearchQuery(parsedPackageSelector) {
    if (!parsedPackageSelector['alias'])
        return parsedPackageSelector['pref'];
    if (!parsedPackageSelector['pref'])
        return `/${parsedPackageSelector['alias']}/`;
    return `/${parsedPackageSelector['alias']}/${parsedPackageSelector['pref']}`;
}
//# sourceMappingURL=storeUsages.js.map