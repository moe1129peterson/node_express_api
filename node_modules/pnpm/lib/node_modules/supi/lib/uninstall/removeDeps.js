"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const core_loggers_1 = require("@pnpm/core-loggers");
const types_1 = require("@pnpm/types");
const load_json_file_1 = require("load-json-file");
const writePkg = require("write-pkg");
function default_1(pkgJsonPath, removedPackages, opts) {
    return __awaiter(this, void 0, void 0, function* () {
        const packageJson = yield load_json_file_1.default(pkgJsonPath);
        if (opts.saveType) {
            packageJson[opts.saveType] = packageJson[opts.saveType];
            if (!packageJson[opts.saveType])
                return packageJson;
            removedPackages.forEach((dependency) => {
                delete packageJson[opts.saveType][dependency];
            });
        }
        else {
            types_1.DEPENDENCIES_FIELDS
                .filter((depField) => packageJson[depField])
                .forEach((depField) => {
                removedPackages.forEach((dependency) => {
                    delete packageJson[depField][dependency];
                });
            });
        }
        yield writePkg(pkgJsonPath, packageJson);
        core_loggers_1.packageJsonLogger.debug({
            prefix: opts.prefix,
            updated: packageJson,
        });
        return packageJson;
    });
}
exports.default = default_1;
//# sourceMappingURL=removeDeps.js.map