"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const makeFetchHappen = require("make-fetch-happen");
const CORGI_DOC = 'application/vnd.npm.install-v1+json; q=1.0, application/json; q=0.8, */*';
const JSON_DOC = 'application/json';
function default_1(defaultOpts) {
    const fetch = makeFetchHappen.defaults({
        ca: defaultOpts.ca,
        cacheManager: null,
        cert: defaultOpts.cert,
        key: defaultOpts.key,
        localAddress: defaultOpts.localAddress,
        proxy: defaultOpts.proxy,
        retry: defaultOpts.retry,
        strictSSL: defaultOpts.strictSSL,
    });
    return (url, opts) => {
        const fetchOpts = {
            headers: getHeaders({
                auth: opts && opts.auth,
                fullMetadata: defaultOpts.fullMetadata,
                userAgent: defaultOpts.userAgent,
            }),
        };
        return fetch(url, fetchOpts);
    };
}
exports.default = default_1;
function getHeaders(opts) {
    const headers = {
        accept: opts.fullMetadata === true ? JSON_DOC : CORGI_DOC,
    };
    if (opts.auth) {
        const authorization = authObjectToHeaderValue(opts.auth);
        if (authorization) {
            headers['authorization'] = authorization; // tslint:disable-line
        }
    }
    if (opts.userAgent) {
        headers['user-agent'] = opts.userAgent;
    }
    return headers;
}
function authObjectToHeaderValue(auth) {
    if (auth.token) {
        return `Bearer ${auth.token}`;
    }
    if (auth.username && auth.password) {
        const encoded = Buffer.from(`${auth.username}:${auth.password}`, 'utf8').toString('base64');
        return `Basic ${encoded}`;
    }
    if (auth._auth) {
        return `Basic ${auth._auth}`;
    }
    return undefined;
}
//# sourceMappingURL=index.js.map