"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
const fastGlob = require("fast-glob");
const pFilter = require("p-filter");
const path = require("path");
const readPkg = require("read-pkg");
const DEFAULT_IGNORE = [
    '**/node_modules/**',
    '**/bower_components/**',
    '**/test/**',
    '**/tests/**',
];
function findPkgs(root, opts) {
    return __awaiter(this, void 0, void 0, function* () {
        opts = opts || {};
        const globOpts = Object.assign({}, opts, { cwd: root });
        globOpts.ignore = opts.ignore || DEFAULT_IGNORE;
        globOpts.patterns = opts.patterns
            ? normalizePatterns(opts.patterns)
            : ['**/package.json'];
        const paths = yield fastGlob(globOpts.patterns, globOpts);
        return pFilter(paths
            .map(path.dirname)
            .map((pkgPath) => path.join(root, pkgPath))
            .map((pkgPath) => __awaiter(this, void 0, void 0, function* () {
            let manifest;
            try {
                manifest = yield readPkg(pkgPath, { normalize: false });
                return { path: pkgPath, manifest };
            }
            catch (err) {
                if (err.code === 'ENOENT') {
                    return null;
                }
                throw err;
            }
        })), Boolean);
    });
}
function normalizePatterns(patterns) {
    return patterns.map((pattern) => pattern.replace(/\/?$/, '/package.json'));
}
// for backward compatibility
findPkgs['default'] = findPkgs; // tslint:disable-line
module.exports = findPkgs;
//# sourceMappingURL=index.js.map