"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const pLimit = require("p-limit");
const path = require("path");
const pathAbsolute = require("path-absolute");
const R = require("ramda");
const supi_1 = require("supi");
const createStoreController_1 = require("../createStoreController");
const findWorkspacePackages_1 = require("../findWorkspacePackages");
const getConfigs_1 = require("../getConfigs");
const installLimit = pLimit(4);
exports.default = (input, opts) => __awaiter(this, void 0, void 0, function* () {
    const cwd = opts && opts.prefix || process.cwd();
    const storeControllerCache = new Map();
    let workspacePackages;
    let localPackages;
    if (opts.linkWorkspacePackages && opts.workspacePrefix) {
        workspacePackages = yield findWorkspacePackages_1.default(opts.workspacePrefix);
        localPackages = findWorkspacePackages_1.arrayOfLocalPackagesToMap(workspacePackages);
    }
    else {
        localPackages = {};
    }
    const store = yield createStoreController_1.cached(storeControllerCache, opts);
    const linkOpts = Object.assign(opts, {
        localPackages,
        store: store.path,
        storeController: store.ctrl,
    });
    // pnpm link
    if (!input || !input.length) {
        yield supi_1.linkToGlobal(cwd, linkOpts);
        return;
    }
    const [pkgPaths, pkgNames] = R.partition((inp) => inp.startsWith('.'), input);
    if (pkgNames.length) {
        let globalPkgNames;
        if (opts.workspacePrefix) {
            workspacePackages = yield findWorkspacePackages_1.default(opts.workspacePrefix);
            const pkgsFoundInWorkspace = workspacePackages.filter((pkg) => pkgNames.indexOf(pkg.manifest.name) !== -1);
            pkgsFoundInWorkspace.forEach((pkgFromWorkspace) => pkgPaths.push(pkgFromWorkspace.path));
            if (pkgsFoundInWorkspace.length && !linkOpts.saveDev && !linkOpts.saveProd && !linkOpts.saveOptional) {
                linkOpts.saveProd = true;
            }
            globalPkgNames = pkgNames.filter((pkgName) => !pkgsFoundInWorkspace.some((pkgFromWorkspace) => pkgFromWorkspace.manifest.name === pkgName));
        }
        else {
            globalPkgNames = pkgNames;
        }
        const globalPkgPath = pathAbsolute(opts.globalPrefix);
        globalPkgNames.forEach((pkgName) => pkgPaths.push(path.join(globalPkgPath, 'node_modules', pkgName)));
    }
    yield Promise.all(pkgPaths.map((prefix) => installLimit(() => __awaiter(this, void 0, void 0, function* () {
        const s = yield createStoreController_1.cached(storeControllerCache, opts);
        yield supi_1.install(Object.assign({}, yield getConfigs_1.default(Object.assign({}, opts.cliArgs, { prefix }), { excludeReporter: true }), { localPackages, store: s.path, storeController: s.ctrl }));
    }))));
    yield supi_1.link(pkgPaths, path.join(cwd, 'node_modules'), linkOpts);
    yield Promise.all(Array.from(storeControllerCache.values())
        .map((storeControllerPromise) => __awaiter(this, void 0, void 0, function* () {
        const storeControllerHolder = yield storeControllerPromise;
        yield storeControllerHolder.ctrl.close();
    })));
});
//# sourceMappingURL=link.js.map