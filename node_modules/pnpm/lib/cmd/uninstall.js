"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const supi_1 = require("supi");
const createStoreController_1 = require("../createStoreController");
const findWorkspacePackages_1 = require("../findWorkspacePackages");
function uninstallCmd(input, opts) {
    return __awaiter(this, void 0, void 0, function* () {
        const store = yield createStoreController_1.default(opts);
        const uninstallOpts = Object.assign(opts, {
            store: store.path,
            storeController: store.ctrl,
        });
        if (opts.shrinkwrapDirectory === opts.prefix) {
            return supi_1.uninstall(input, uninstallOpts);
        }
        uninstallOpts['localPackages'] = opts.linkWorkspacePackages && opts.workspacePrefix
            ? findWorkspacePackages_1.arrayOfLocalPackagesToMap(yield findWorkspacePackages_1.default(opts.workspacePrefix))
            : undefined;
        return supi_1.mutateModules([
            {
                bin: opts.bin,
                dependencyNames: input,
                mutation: 'uninstallSome',
                prefix: opts.prefix,
            },
        ], uninstallOpts);
    });
}
exports.default = uninstallCmd;
//# sourceMappingURL=uninstall.js.map